<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean id="customAccessDenied" class="com.google.security.CustomAccessDeniedHandler"></bean>

		<bean id="customLoginSuccess" class="com.google.security.CustomLoginSuccessHandler"></bean>
<!-- 시큐리티의 시작점 -->
<security:http>
	 <!-- 접근 제한설정 pattern 은 uri 패턴 의미, access는 권한체크 (security:http)는 기본설정이 표현식을 이용한다.  -->
	<security:intercept-url pattern="/sample/all" access="permitAll" />

	<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
	
	<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')" />
	
	<security:form-login login-page="/customLogin"
					 authentication-success-handler-ref="customLoginSuccess"/>
	
	<!-- 접근 제한 메시지 처리 -->
	<!-- <security:access-denied-handler error-page="/accessError"/> -->
	<security:access-denied-handler ref="customAccessDenied"/>
	
<!-- 	<security:csrf disabled="true"/> -->

	<!--invalidate-session 을 true로 지정하면 말그대로 로그아웃 했을때 세션을 무효화 시킨다.-->
	<security:logout logout-url="customLogout" invalidate-session="true"/>

</security:http>

<security:authentication-manager>

	<security:authentication-provider>
	
		<security:user-service>
		
			<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
			
			<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
			
		</security:user-service>
		
	</security:authentication-provider>
	
</security:authentication-manager>
		
		
</beans>